# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mine_grpc_pb2 as mine__grpc__pb2


class apiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getTransactionId = channel.unary_unary(
                '/main.api/getTransactionId',
                request_serializer=mine__grpc__pb2.void.SerializeToString,
                response_deserializer=mine__grpc__pb2.intResult.FromString,
                )
        self.getChallenge = channel.unary_unary(
                '/main.api/getChallenge',
                request_serializer=mine__grpc__pb2.transactionId.SerializeToString,
                response_deserializer=mine__grpc__pb2.intResult.FromString,
                )
        self.getTransactionStatus = channel.unary_unary(
                '/main.api/getTransactionStatus',
                request_serializer=mine__grpc__pb2.transactionId.SerializeToString,
                response_deserializer=mine__grpc__pb2.intResult.FromString,
                )
        self.submitChallenge = channel.unary_unary(
                '/main.api/submitChallenge',
                request_serializer=mine__grpc__pb2.challengeArgs.SerializeToString,
                response_deserializer=mine__grpc__pb2.intResult.FromString,
                )
        self.getWinner = channel.unary_unary(
                '/main.api/getWinner',
                request_serializer=mine__grpc__pb2.transactionId.SerializeToString,
                response_deserializer=mine__grpc__pb2.intResult.FromString,
                )
        self.getSolution = channel.unary_unary(
                '/main.api/getSolution',
                request_serializer=mine__grpc__pb2.transactionId.SerializeToString,
                response_deserializer=mine__grpc__pb2.structResult.FromString,
                )


class apiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getTransactionId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getChallenge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTransactionStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def submitChallenge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getWinner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSolution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_apiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getTransactionId': grpc.unary_unary_rpc_method_handler(
                    servicer.getTransactionId,
                    request_deserializer=mine__grpc__pb2.void.FromString,
                    response_serializer=mine__grpc__pb2.intResult.SerializeToString,
            ),
            'getChallenge': grpc.unary_unary_rpc_method_handler(
                    servicer.getChallenge,
                    request_deserializer=mine__grpc__pb2.transactionId.FromString,
                    response_serializer=mine__grpc__pb2.intResult.SerializeToString,
            ),
            'getTransactionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getTransactionStatus,
                    request_deserializer=mine__grpc__pb2.transactionId.FromString,
                    response_serializer=mine__grpc__pb2.intResult.SerializeToString,
            ),
            'submitChallenge': grpc.unary_unary_rpc_method_handler(
                    servicer.submitChallenge,
                    request_deserializer=mine__grpc__pb2.challengeArgs.FromString,
                    response_serializer=mine__grpc__pb2.intResult.SerializeToString,
            ),
            'getWinner': grpc.unary_unary_rpc_method_handler(
                    servicer.getWinner,
                    request_deserializer=mine__grpc__pb2.transactionId.FromString,
                    response_serializer=mine__grpc__pb2.intResult.SerializeToString,
            ),
            'getSolution': grpc.unary_unary_rpc_method_handler(
                    servicer.getSolution,
                    request_deserializer=mine__grpc__pb2.transactionId.FromString,
                    response_serializer=mine__grpc__pb2.structResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.api', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class api(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getTransactionId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.api/getTransactionId',
            mine__grpc__pb2.void.SerializeToString,
            mine__grpc__pb2.intResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getChallenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.api/getChallenge',
            mine__grpc__pb2.transactionId.SerializeToString,
            mine__grpc__pb2.intResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTransactionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.api/getTransactionStatus',
            mine__grpc__pb2.transactionId.SerializeToString,
            mine__grpc__pb2.intResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def submitChallenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.api/submitChallenge',
            mine__grpc__pb2.challengeArgs.SerializeToString,
            mine__grpc__pb2.intResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getWinner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.api/getWinner',
            mine__grpc__pb2.transactionId.SerializeToString,
            mine__grpc__pb2.intResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSolution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.api/getSolution',
            mine__grpc__pb2.transactionId.SerializeToString,
            mine__grpc__pb2.structResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
